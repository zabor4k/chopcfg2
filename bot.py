# –ß—Ç–æ –∂–µ, –º–Ω–µ –ª–µ–Ω—å –±—ã–ª–æ –¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ aiogram
# –ü–µ—Ä–µ–ø–∏—Å—Å—ã–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–∫–≤–∞–ª—å–Ω–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.
# ================================================================================
# –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: Nodus
# Telegram: @sirsus
# Vk: @crypto_ware
# ================================================================================
# –ü–æ—Å—Ç–∞—Ä–∞–ª—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
# –°–∞–º–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–∑—É—á–∞–µ—Ç—Å—è –±—É–∫–≤–∞–ª—å–Ω–æ –∑–∞ 1 —á–∞—Å.
# –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—É—á–∞ –≥–∞–≤–Ω–æ –∫–æ–¥–∞ (–∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞—Ç–æ)
# ================================================================================
# –ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
# 1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–ª–∞—Ç—É
# 2. –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—ã–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∫—Ñ–≥ —Å –æ–±–Ω–æ–≤–∞–º–∏)
# 3. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ Aiogram –±–∏–±–ª–∏–æ—Ç–µ–∫—É
# 4. –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É, –∏ –≤—ã–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞
# ================================================================================
# –£–¥–∞—á–∏

# –ë–æ—Ç
import telebot
from telebot import types

# –ù–∞—à–∞ –ë–î
import sqlite3 as sqlite 

# –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ config'a
from config import TOKEN, ADMIN_ID, INTRO
from messages import START_MSG, CFG_MSG, REVIEWS_MSG, FQA_MSG

# –†—É–ª–µ—Ç–∫–∞
import ruletka

# –í–∏–∑—É–∞–ª–∫–∞
import time
import os
from random import *

# –°–æ–∑–¥–∞–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

os.system("cls")
# os.system("clear")
if INTRO == 1:
    time.sleep(1)
    print("---------------------------------------")
    time.sleep(0.25)
    print("|      TELEGRAM CFG SHOP TEMPLATE     |")
    time.sleep(1)
    print("|            Created by Nodus         |")
    time.sleep(1)
    print("| https://yougame.biz/threads/184424/ |")
    time.sleep(1)
    print("|             VERSION: 1.1            |")
    time.sleep(0.25)
    print("|-------------------------------------|")
    time.sleep(1)
    print("|              CHANGE LOG             |")
    time.sleep(1)
    print("|        [+] Added ban system         |")
    time.sleep(0.5)
    print("|        [+] Added random cfg         |")
    time.sleep(0.5)
    print("|        [+] Fix bugs                 |")
    time.sleep(0.5)
    print("|        [+] Added key system         |")
    time.sleep(0.5)
    print("|-------------------------------------|")
    time.sleep(1)
    print("|             LAST UPDATE             |")
    time.sleep(1)
    print("|       30.01.2021 in 01:48:20 PM     |")
    time.sleep(1)
    print("---------------------------------------")
    time.sleep(5)
    os.system("cls")
    # os.system("clear")
print("Bot Working...")

WORK_STATUS = None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_ID
if ADMIN_ID == 0:
    print("[–ê–•–¢–£–ù–ì] –í–≤–µ–¥–∏ admin id")
    WORK_STATUS = False
else:
    WORK_STATUS = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ–∞—Ç—å –ª–æ–ª)
if TOKEN == 'change this':
    print("[–ê–•–¢–£–ù–ì] –í–≤–µ–¥–∏ TOKEN")
    WORK_STATUS = False
else:
    WORK_STATUS = True
    
# ============================================================================================ 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
    db = sqlite.connect('base.db')
    cur = db.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–¥ –ø–æ telegram user id
    try:
        cur.execute(f"SELECT * FROM users WHERE id = {message.from_user.id}")
    except Exception as e:
        print(repr(e))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥
    if not cur.fetchone():
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥
            cur.execute("INSERT INTO users VALUES (?,?,?)", (
                message.from_user.id, # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message.from_user.username, # Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ—Ç –≤–µ—Ä–Ω–µ—Ç None –∏–ª–∏ —á—Ç–æ —Ç–æ —Ç–∞–∫–æ–≥–æ)
                129600,
            ))

            print(f"User: {message.from_user.id} successfully added!")
        except Exception as e:
            print(repr(e))
    else:
        print(f"User: {message.from_user.id} in the base yet...")

    db.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id != ADMIN_ID:

        try:
            cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}")
        except Exception as e:
            print(repr(e))

        if not cur.fetchone():
        
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞)
            markup = types.ReplyKeyboardMarkup(row_width=1)

            # –ù–∞—à–∏ –∫–Ω–æ–ø–∫–∏
            item1 = types.KeyboardButton("üìÑ –ö–æ–Ω—Ñ–∏–≥–∏ üìÑ")
            item2 = types.KeyboardButton("üí¨ –û—Ç—ã–∑–≤—ã üí¨")
            item3 = types.KeyboardButton("‚ùì F.Q.A ‚ùî")
            item4 = types.KeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞ üé∞")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∫–ª–∞–≤–µ
            markup.add(
                item1,
                item2,
                item3,
                item4
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ messages.py
            # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç–µ parse_mode="html" –Ω–∞ parse_mode="Markdown".
            bot.send_message(message.chat.id, START_MSG, parse_mode="html", reply_markup=markup)

        else:

            for i in cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}"):

                reason = str(i[1])

                bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

    elif message.from_user.id == ADMIN_ID:

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
        markup = types.InlineKeyboardMarkup(row_width=1)

        # –ö–Ω–æ–ø–∫–∏
        item1 = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="general cfg")
        item2 = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", callback_data="general bot")
        item3 = types.InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="ban user")
        item4 = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="go to user panel")
        item5 = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", callback_data="close")

        markup.add(
            item1,
            item2,
            item3,
            item4,
            item5,
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, f"Hello, {message.from_user.first_name}!", parse_mode="html",reply_markup=markup)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
    if db:
        db.close()

# ============================================================================================ 

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['mail'])
def mail(message):

    if message.from_user.id == ADMIN_ID:

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(msg, send_mail)

def send_mail(message):

    db = sqlite.connect("base.db")
    cur = db.cursor()

    markup = types.InlineKeyboardMarkup(row_width=1)

    item1 = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")

    markup.add(
        item1
    )

    try:
        for i in cur.execute(f"SELECT * FROM users"):

            bot.send_message(i[0], message.text, parse_mode="html", reply_markup=markup)

    except Exception as e:
        print(repr(e))

    if db:
        db.close

# ============================================================================================ 

@bot.message_handler(commands=['activate'])
def activate(message):

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á")
    bot.register_next_step_handler(msg, activate_key)

# ============================================================================================ 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def message(message):

    if message.chat.type == 'private':

        if message.text.lower() == "üí¨ –æ—Ç—ã–∑–≤—ã üí¨":

            db = sqlite.connect('base.db')
            cur = db.cursor()

            try:
                cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}")
            except Exception as e:
                print(repr(e))
            
            if not cur.fetchone():

                bot.send_message(message.chat.id, REVIEWS_MSG)

            else:
                try:
                    for i in cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}"):

                        reason = str(i[1])

                        bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

                except Exception as e:
                    print(repr(e))

            if db:
                db.close

        if message.text.lower() == "‚ùì f.q.a ‚ùî":

            db = sqlite.connect('base.db')
            cur = db.cursor()

            try:
                cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}")
            except Exception as e:
                print(repr(e))
            
            if not cur.fetchone():

                bot.send_message(message.chat.id, FQA_MSG)

            else:
                try:
                    for i in cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}"):

                        reason = str(i[1])

                        bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

                except Exception as e:
                    print(repr(e))
            
            if db:
                db.close
        
        elif message.text.lower() == "üé∞ —Ä—É–ª–µ—Ç–∫–∞ üé∞":

            ruletka.start(message)
        
        # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ –±—ã –æ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–ª –ø–æ —Å–ª–æ–≤—É –≤ –º–µ—Å—Å–∞–¥–∂–µ, –Ω–æ –º–Ω–µ –ª–µ–Ω—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—Ç–æ –∑–∞—Ö–æ—á–µ—Ç, —Ç–æ—Ç —Å–¥–µ–ª–∞–µ—Ç
        elif message.text.lower() == 'üìÑ –∫–æ–Ω—Ñ–∏–≥–∏ üìÑ':

            db = sqlite.connect('base.db')
            cur = db.cursor()

            try:
                cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}")
            except Exception as e:
                print(repr(e))
            
            if not cur.fetchone():

                markup = types.ReplyKeyboardMarkup(row_width=2)

                item1 = types.KeyboardButton("Onetap")
                item2 = types.KeyboardButton("gamesense")
                item3 = types.KeyboardButton("Evolve")
                item4 = types.KeyboardButton("Legendware")
                item5 = types.KeyboardButton("Spirthack")
                item6 = types.KeyboardButton("XONE")
                item7 = types.KeyboardButton("OTC 2")
                item8 = types.KeyboardButton("OTC 3")
                item9 = types.KeyboardButton("BoberHook")
                item10 = types.KeyboardButton("Neverlose")
                item11 = types.KeyboardButton("‚ùå –ù–∞–∑–∞–¥ ‚ùå")

                markup.add(
                    item1, item2,
                    item3, item4,
                    item5, item6,
                    item7, item8,
                    item9, item10,
                    item11,
                )


                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ñ–∏–≥", reply_markup=markup)

            else:
                try:
                    for i in cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}"):

                        reason = str(i[1])

                        bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

                except Exception as e:
                    print(repr(e)) 

            if db:
                db.close

        
        elif message.text.lower() == "gamesense":

            db = sqlite.connect('base.db')
            cur = db.cursor()

            try:
                cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}")
            except Exception as e:
                print(repr(e))
            
            if not cur.fetchone():

                try:
                    cur.execute(f"SELECT * FROM configs WHERE cheat = 'gamesense'")
                except Exception as e:
                    print(repr(e))

                if not cur.fetchone():

                    bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç!")
                
                else:

                    for x in cur.execute(f"SELECT * FROM configs WHERE cheat = 'gamesense'"):

                        desc = str(x[1])
                        price = int(x[2])
                        link = str(x[3])

                        markup = types.InlineKeyboardMarkup(row_width=1)

                        if message.from_user.id != ADMIN_ID:

                            item1 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="buy_gamesense")
                        else:
                            item1 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å", url=link)

                        item2 = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")

                        markup.add(
                            item1,
                            item2
                        )

                        bot.send_message(message.chat.id, 
                        f"| –ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ <b>Gamesense</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{desc}</i>\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}</b>", parse_mode="html", reply_markup=markup)
            
            else:
                try:
                    for i in cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}"):

                        reason = str(i[1])

                        bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

                except Exception as e:
                    print(repr(e))
            if db:
                db.close
        
        elif message.text.lower() == "onetap":

            db = sqlite.connect('base.db')
            cur = db.cursor()

            try:
                cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}")
            except Exception as e:
                print(repr(e))
            
            if not cur.fetchone():

                try:
                    cur.execute(f"SELECT * FROM configs WHERE cheat = 'onetap'")
                except Exception as e:
                    print(repr(e))

                if not cur.fetchone():

                    bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç!")
                
                else:

                    for x in cur.execute(f"SELECT * FROM configs WHERE cheat = 'onetap'"):

                        desc = str(x[1])
                        price = int(x[2])
                        link = str(x[3])

                        markup = types.InlineKeyboardMarkup(row_width=1)

                        if message.from_user.id != ADMIN_ID:

                            item1 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="buy_gamesense")
                        else:
                            item1 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å", url=link)

                        item2 = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")

                        markup.add(
                            item1,
                            item2
                        )

                        bot.send_message(message.chat.id, 
                        f"| –ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ <b>Gamesense</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{desc}</i>\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}</b>", parse_mode="html", reply_markup=markup)
            
            else:
                try:
                    for i in cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}"):

                        reason = str(i[1])

                        bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

                except Exception as e:
                    print(repr(e))
            if db:
                db.close

        
        # –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏
        
        elif message.text.lower() == "evolve":

            pass

        elif message.text.lower() == "legendware":

            pass

        
        elif message.text.lower() == "spirthack":

            pass

        elif message.text.lower() == "neverlose":

            pass

        elif message.text.lower() == "xone":

            pass

        elif message.text.lower() == "otc 2":

            pass

        
        elif message.text.lower() == "otc 3":

            pass

        elif message.text.lower() == "boberhook":

            pass

# ============================================================================================ 

# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def banuser(message):

    db = sqlite.connect('base.db')
    cur = db.cursor()

    try:
        cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}")
    except Exception as e:
        print(repr(e))

    if not cur.fetchone():
        try:
            cur.execute("INSERT INTO banlist VALUES (?,?)", (
                int(message.text),
                "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"
            ))

            msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞")
            bot.register_next_step_handler(msg, banuser2)
        except Exception as e:
            print(repr(e))
    else:

        for i in cur.execute(f"SELECT * FROM banlist WHERE id = {message.text}"):

            reason = str(i[1])

            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}!")

    db.commit()

    if db:
        db.close

def banuser2(message):

    db = sqlite.connect('base.db')
    cur = db.cursor()

    try:
        for x in cur.execute(f"SELECT * FROM banlist WHERE id = {message.from_user.id}"):

            try:

                id = str(x[0])

                cur.execute(f"UPDATE banlist SET reason = '{message.text}' WHERE id = {id}")

            except Exception as e:
                print(repr(e))
    except Exception as e:
        print(repr(e))

    db.commit()

    if db:
        db.close

# ============================================================================================ 

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ
def new_prize(message):

    db = sqlite.connect('base.db')
    cur = db.cursor()

    try:
        cur.execute(f"UPDATE rulletka SET priz = '{message.text}'")

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(msg, new_prize2)
    except Exception as e:
        print(repr(e))

    db.commit()

    if db:
        db.close

def new_prize2(message):

    db = sqlite.connect('base.db')
    cur = db.cursor()

    try:
        cur.execute(f"UPDATE rulletka SET link = '{message.text}'")

        bot.send_message(message.chat.id, "–í –ø—Ä–∏–∑ –≤ —Ä—É–ª–µ—Ç–∫–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(repr(e))

    db.commit()

    if db:
        db.close

# ============================================================================================ 
# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
def generate_key(message):

    db = sqlite.connect('base.db')
    cur = db.cursor()

    try:
        cur.execute(f"SELECT * FROM configs WHERE cheat = '{message.text}'")
    except Exception as e:
        print(repr(e))

    if not cur.fetchone():

        msg = bot.send_message(message.chat.id, "–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        bot.register_next_step_handler(msg, generate_key)

    else:

        for x in cur.execute(f"SELECT * FROM configs WHERE cheat = '{message.text}'"):

            try:

                chars = "zaqwsxcderfvbgtyhnmjuiklop" + "ZAQWSXCDERFVBGTYHNMJUIKLOP" + "1234567890"
                
                key = ''.join(choice(chars) for j in range(175))

                cur.execute("INSERT INTO keys VALUES (?,?,?)", (
                    key,
                    message.text,
                    str(x[3])
                ))

                bot.send_message(message.chat.id, f"–ö–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n`{key}`", parse_mode="markdown")

            except Exception as e:
                print(repr(e))

        db.commit()

    if db:
        db.close

def activate_key(message):

    db = sqlite.connect('base.db')
    cur = db.cursor()

    try:
        cur.execute(f"SELECT * FROM keys WHERE key = '{message.text}'")
    except Exception as e:
        print(repr(e))

    if not cur.fetchone():

        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
        bot.register_next_step_handler(msg, activate_key)

    else:

        for i in cur.execute(f"SELECT * FROM keys WHERE key = '{message.text}'"):

            markup = types.InlineKeyboardMarkup(row_width=1)

            item1 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä", url=str(i[2]))
            item2 = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")

            markup.add(
                item1,
                item2
            )

            bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–ª—é—á –Ω–∞ {str(i[1])}!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–∏—Ç—å, —á—Ç–æ –±—ã —Å–∫–∞—á–∞—Ç—å —Ç–æ–≤–∞—Ä!", reply_markup=markup)

            try:
                cur.execute(f"DELETE FROM keys WHERE key = '{message.text}'")
            except Exception as e:
                print(repr(e))
            
        db.commit()

        if db:
            db.close

# ============================================================================================ 

# –†–∞–±–æ—Ç–∞ —Å –∏–Ω–ª–∞–π–Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
@bot.callback_query_handler(func=lambda call: True)
def call(call):

    if call.message:
        
        if call.data == "ban user":
            
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            bot.register_next_step_handler(msg, banuser)

        elif call.data == "general cfg":

            markup = types.InlineKeyboardMarkup(row_width=2)

            item1 = types.InlineKeyboardButton("1", callback_data="1")
            item2 = types.InlineKeyboardButton("2", callback_data="2")
            item3 = types.InlineKeyboardButton("3", callback_data="3")
            item4 = types.InlineKeyboardButton("4", callback_data="4")
            item5 = types.InlineKeyboardButton("5", callback_data="5")
            item6 = types.InlineKeyboardButton("6", callback_data="6")
            item7 = types.InlineKeyboardButton("7", callback_data="7")
            item8 = types.InlineKeyboardButton("8", callback_data="8")
            item9 = types.InlineKeyboardButton("9", callback_data="9")
            item10 = types.InlineKeyboardButton("10", callback_data="10")
            item11 = types.InlineKeyboardButton("11", callback_data="11")
            
            markup.add(
                item1, item2,
                item3, item4,
                item5, item6,
                item7, item8,
                item9, item10,
                item11,
            )

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)

            
        elif call.data == "general bot":

            markup = types.InlineKeyboardMarkup(row_width=1)

            item1 = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–æ–π", callback_data="ruletka")
            item3 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create key")
            item2 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back to admin panel")

            markup.add(
                item1,
                item3,
                item2,
            )

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", reply_markup=markup)
        
        elif call.data == "create key":

            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤ –∫–ª—é—á")
            bot.register_next_step_handler(msg, generate_key)
        
        elif call.data == "ruletra":

            db = sqlite.connect('base.db')
            cur = db.cursor()

            markup = types.InlineKeyboardMarkup(row_width=1)

            for i in cur.execute(f"SELECT * FROM rulletka"):

                if int(i[0]) == 0:

                    toggle = types.InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å", callback_data="on ruletka")

                    item3 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="general bot")

                    markup.add(
                        toggle,
                        item3,
                    )
                
                elif int(i[0]) == 1:
                
                    toggle = types.InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="of ruletka")

                    item1 = types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑", callback_data="change priz")
                    item3 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="general bot")

                    markup.add(
                        toggle,
                        item1,
                        item3,
                    )

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–æ–π", reply_markup=markup)
        
        elif call.data == 'change priz':

            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞")
            bot.register_next_step_handler(msg, new_prize)
        
        elif call.data == 'on ruletka':

            db = sqlite.connect('base.db')
            cur = db.cursor()

            cur.execute(f"UPDATE rulletka SET mode = {1}")

            db.commit()

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–æ–π", reply_markup=markup)

            if db:
                db.close

        elif call.data == "of ruletka":

            db = sqlite.connect('base.db')
            cur = db.cursor()

            cur.execute(f"UPDATE rulletka SET mode = {0}")

            db.commit()

            if db:
                db.close
        
        elif call.data == "back to admin panel":

            start(message)
        
        elif call.data == "go to user panel":

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞)
            markup = types.ReplyKeyboardMarkup(row_width=1)

            # –ù–∞—à–∏ –∫–Ω–æ–ø–∫–∏
            item1 = types.KeyboardButton("üìÑ –ö–æ–Ω—Ñ–∏–≥–∏ üìÑ")
            item2 = types.KeyboardButton("üí¨ –û—Ç—ã–∑–≤—ã üí¨")
            item3 = types.KeyboardButton("‚ùì F.Q.A ‚ùî")
            item4 = types.KeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞ üé∞")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∫–ª–∞–≤–µ
            markup.add(
                item1,
                item2,
                item3,
                item4
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ messages.py
            # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç–µ parse_mode="html" –Ω–∞ parse_mode="Markdown".
            bot.send_message(call.message.chat.id, START_MSG, parse_mode="html", reply_markup=markup)
        
        elif call.data == "close":

            bot.delete_message(call.message.chat.id, call.message.message_id)

        

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if WORK_STATUS == True:
        bot.polling(none_stop=True)